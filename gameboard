class BoardClass:
    """Class representing Tic Tac Toe game board."""

    def __init__(self, player1_name, player2_name):
        """ Initializes the instance of a game board

        Args:
            player1_name (str): The username for Player 1
            player2_name (str): The username for Player 2
        """
        self.player1_name = player1_name
        self.player2_name = player2_name
        self.last_player_turn = None
        self.num_wins = {player1_name: 0, player2_name: 0}
        self.num_ties = 0
        self.num_losses = {player1_name: 0, player2_name: 0}
        self.games_played = 0
        self.board = [
            [' ', ' ', ' '],
            [' ', ' ', ' '],
            [' ', ' ', ' ']
        ]

    def updateGamesPlayed(self):
        """Keeps track how many games have started."""
        self.games_played += 1

    def resetGameBoard(self):
        """Clear all the moves from game board"""
        self.board = [[' ', ' ', ' '],
                      [' ', ' ', ' '],
                      [' ', ' ', ' ']
                      ]

    def updateGameBoard(self, player, row, column):
        """Updates the game board with the player's move and checks if the latest move resulted in a win"""
        if self.board[row][column] == ' ':
            if player == self.player1_name:
                self.board[row][column] = 'X'
                return True
            elif player == 'Player 2':
                self.board[row][column] = 'O'
                return True
        else:
            return False

    def isWinner(self):
        """Checks if either Player 1 or Player 2 has won and updates win count."""
        win_cases = [
            # Rows
            [self.board[0][0], self.board[0][1], self.board[0][2]],
            [self.board[1][0], self.board[1][1], self.board[1][2]],
            [self.board[2][0], self.board[2][1], self.board[2][2]],
            # Columns
            [self.board[0][0], self.board[1][0], self.board[2][0]],
            [self.board[0][1], self.board[1][1], self.board[2][1]],
            [self.board[0][2], self.board[1][2], self.board[2][2]],
            # Diagonals
            [self.board[0][0], self.board[1][1], self.board[2][2]],
            [self.board[0][2], self.board[1][1], self.board[2][0]]
        ]

        # Checks all possible win cases and if it is X that has won
        for symbol in win_cases:
            if symbol[0] != ' ' and symbol[0] == symbol[1] == symbol[2]:
                self.updateGamesPlayed()
                if symbol[0] == 'X':
                    winner = self.player1_name
                    # print(f'{winner} has won!')
                    self.num_wins[winner] += 1
                    self.num_losses[self.player2_name] += 1
                    return True
                else:
                    winner = self.player2_name
                    # print(f'{winner} has won!')
                    self.num_wins[winner] += 1
                    self.num_losses[self.player1_name] += 1
                    return True
            else:
                continue
        return False

    def boardIsFull(self):
        """Checks if the board is full and tied to update ties count."""
        if ' ' not in self.board[0] and ' ' not in self.board[1] and ' ' not in self.board[2]\
                and self.isWinner() is False:
            # print('Result is a tie!')
            self.updateGamesPlayed()
            self.num_ties += 1
            return True

    def printStats(self):
        """Prints the stats for Player 1 and Player 2 of all the games."""
        print(f'Player 1: {self.player1_name}, Player 2: {self.player2_name}')
        print(f'Last player to make a move: {self.last_player_turn}')
        print(f'Number of games played: {self.games_played}')
        print(f'Number of wins: {self.num_wins}')
        print(f'Number of losses: {self.num_losses}')
        print(f'Number of ties: {self.num_ties}')
